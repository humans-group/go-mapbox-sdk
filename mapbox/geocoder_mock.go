package mapbox

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// GeocoderMock implements Geocoder
type GeocoderMock struct {
	t minimock.Tester

	funcReverseGeocode          func(ctx context.Context, req *ReverseGeocodeRequest) (rp1 *ReverseGeocodeResponse, err error)
	inspectFuncReverseGeocode   func(ctx context.Context, req *ReverseGeocodeRequest)
	afterReverseGeocodeCounter  uint64
	beforeReverseGeocodeCounter uint64
	ReverseGeocodeMock          mGeocoderMockReverseGeocode
}

// NewGeocoderMock returns a mock for Geocoder
func NewGeocoderMock(t minimock.Tester) *GeocoderMock {
	m := &GeocoderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReverseGeocodeMock = mGeocoderMockReverseGeocode{mock: m}
	m.ReverseGeocodeMock.callArgs = []*GeocoderMockReverseGeocodeParams{}

	return m
}

type mGeocoderMockReverseGeocode struct {
	mock               *GeocoderMock
	defaultExpectation *GeocoderMockReverseGeocodeExpectation
	expectations       []*GeocoderMockReverseGeocodeExpectation

	callArgs []*GeocoderMockReverseGeocodeParams
	mutex    sync.RWMutex
}

// GeocoderMockReverseGeocodeExpectation specifies expectation struct of the Geocoder.ReverseGeocode
type GeocoderMockReverseGeocodeExpectation struct {
	mock    *GeocoderMock
	params  *GeocoderMockReverseGeocodeParams
	results *GeocoderMockReverseGeocodeResults
	Counter uint64
}

// GeocoderMockReverseGeocodeParams contains parameters of the Geocoder.ReverseGeocode
type GeocoderMockReverseGeocodeParams struct {
	ctx context.Context
	req *ReverseGeocodeRequest
}

// GeocoderMockReverseGeocodeResults contains results of the Geocoder.ReverseGeocode
type GeocoderMockReverseGeocodeResults struct {
	rp1 *ReverseGeocodeResponse
	err error
}

// Expect sets up expected params for Geocoder.ReverseGeocode
func (mmReverseGeocode *mGeocoderMockReverseGeocode) Expect(ctx context.Context, req *ReverseGeocodeRequest) *mGeocoderMockReverseGeocode {
	if mmReverseGeocode.mock.funcReverseGeocode != nil {
		mmReverseGeocode.mock.t.Fatalf("GeocoderMock.ReverseGeocode mock is already set by Set")
	}

	if mmReverseGeocode.defaultExpectation == nil {
		mmReverseGeocode.defaultExpectation = &GeocoderMockReverseGeocodeExpectation{}
	}

	mmReverseGeocode.defaultExpectation.params = &GeocoderMockReverseGeocodeParams{ctx, req}
	for _, e := range mmReverseGeocode.expectations {
		if minimock.Equal(e.params, mmReverseGeocode.defaultExpectation.params) {
			mmReverseGeocode.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReverseGeocode.defaultExpectation.params)
		}
	}

	return mmReverseGeocode
}

// Inspect accepts an inspector function that has same arguments as the Geocoder.ReverseGeocode
func (mmReverseGeocode *mGeocoderMockReverseGeocode) Inspect(f func(ctx context.Context, req *ReverseGeocodeRequest)) *mGeocoderMockReverseGeocode {
	if mmReverseGeocode.mock.inspectFuncReverseGeocode != nil {
		mmReverseGeocode.mock.t.Fatalf("Inspect function is already set for GeocoderMock.ReverseGeocode")
	}

	mmReverseGeocode.mock.inspectFuncReverseGeocode = f

	return mmReverseGeocode
}

// Return sets up results that will be returned by Geocoder.ReverseGeocode
func (mmReverseGeocode *mGeocoderMockReverseGeocode) Return(rp1 *ReverseGeocodeResponse, err error) *GeocoderMock {
	if mmReverseGeocode.mock.funcReverseGeocode != nil {
		mmReverseGeocode.mock.t.Fatalf("GeocoderMock.ReverseGeocode mock is already set by Set")
	}

	if mmReverseGeocode.defaultExpectation == nil {
		mmReverseGeocode.defaultExpectation = &GeocoderMockReverseGeocodeExpectation{mock: mmReverseGeocode.mock}
	}
	mmReverseGeocode.defaultExpectation.results = &GeocoderMockReverseGeocodeResults{rp1, err}
	return mmReverseGeocode.mock
}

//Set uses given function f to mock the Geocoder.ReverseGeocode method
func (mmReverseGeocode *mGeocoderMockReverseGeocode) Set(f func(ctx context.Context, req *ReverseGeocodeRequest) (rp1 *ReverseGeocodeResponse, err error)) *GeocoderMock {
	if mmReverseGeocode.defaultExpectation != nil {
		mmReverseGeocode.mock.t.Fatalf("Default expectation is already set for the Geocoder.ReverseGeocode method")
	}

	if len(mmReverseGeocode.expectations) > 0 {
		mmReverseGeocode.mock.t.Fatalf("Some expectations are already set for the Geocoder.ReverseGeocode method")
	}

	mmReverseGeocode.mock.funcReverseGeocode = f
	return mmReverseGeocode.mock
}

// When sets expectation for the Geocoder.ReverseGeocode which will trigger the result defined by the following
// Then helper
func (mmReverseGeocode *mGeocoderMockReverseGeocode) When(ctx context.Context, req *ReverseGeocodeRequest) *GeocoderMockReverseGeocodeExpectation {
	if mmReverseGeocode.mock.funcReverseGeocode != nil {
		mmReverseGeocode.mock.t.Fatalf("GeocoderMock.ReverseGeocode mock is already set by Set")
	}

	expectation := &GeocoderMockReverseGeocodeExpectation{
		mock:   mmReverseGeocode.mock,
		params: &GeocoderMockReverseGeocodeParams{ctx, req},
	}
	mmReverseGeocode.expectations = append(mmReverseGeocode.expectations, expectation)
	return expectation
}

// Then sets up Geocoder.ReverseGeocode return parameters for the expectation previously defined by the When method
func (e *GeocoderMockReverseGeocodeExpectation) Then(rp1 *ReverseGeocodeResponse, err error) *GeocoderMock {
	e.results = &GeocoderMockReverseGeocodeResults{rp1, err}
	return e.mock
}

// ReverseGeocode implements Geocoder
func (mmReverseGeocode *GeocoderMock) ReverseGeocode(ctx context.Context, req *ReverseGeocodeRequest) (rp1 *ReverseGeocodeResponse, err error) {
	mm_atomic.AddUint64(&mmReverseGeocode.beforeReverseGeocodeCounter, 1)
	defer mm_atomic.AddUint64(&mmReverseGeocode.afterReverseGeocodeCounter, 1)

	if mmReverseGeocode.inspectFuncReverseGeocode != nil {
		mmReverseGeocode.inspectFuncReverseGeocode(ctx, req)
	}

	mm_params := &GeocoderMockReverseGeocodeParams{ctx, req}

	// Record call args
	mmReverseGeocode.ReverseGeocodeMock.mutex.Lock()
	mmReverseGeocode.ReverseGeocodeMock.callArgs = append(mmReverseGeocode.ReverseGeocodeMock.callArgs, mm_params)
	mmReverseGeocode.ReverseGeocodeMock.mutex.Unlock()

	for _, e := range mmReverseGeocode.ReverseGeocodeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmReverseGeocode.ReverseGeocodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReverseGeocode.ReverseGeocodeMock.defaultExpectation.Counter, 1)
		mm_want := mmReverseGeocode.ReverseGeocodeMock.defaultExpectation.params
		mm_got := GeocoderMockReverseGeocodeParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReverseGeocode.t.Errorf("GeocoderMock.ReverseGeocode got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReverseGeocode.ReverseGeocodeMock.defaultExpectation.results
		if mm_results == nil {
			mmReverseGeocode.t.Fatal("No results are set for the GeocoderMock.ReverseGeocode")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmReverseGeocode.funcReverseGeocode != nil {
		return mmReverseGeocode.funcReverseGeocode(ctx, req)
	}
	mmReverseGeocode.t.Fatalf("Unexpected call to GeocoderMock.ReverseGeocode. %v %v", ctx, req)
	return
}

// ReverseGeocodeAfterCounter returns a count of finished GeocoderMock.ReverseGeocode invocations
func (mmReverseGeocode *GeocoderMock) ReverseGeocodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReverseGeocode.afterReverseGeocodeCounter)
}

// ReverseGeocodeBeforeCounter returns a count of GeocoderMock.ReverseGeocode invocations
func (mmReverseGeocode *GeocoderMock) ReverseGeocodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReverseGeocode.beforeReverseGeocodeCounter)
}

// Calls returns a list of arguments used in each call to GeocoderMock.ReverseGeocode.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReverseGeocode *mGeocoderMockReverseGeocode) Calls() []*GeocoderMockReverseGeocodeParams {
	mmReverseGeocode.mutex.RLock()

	argCopy := make([]*GeocoderMockReverseGeocodeParams, len(mmReverseGeocode.callArgs))
	copy(argCopy, mmReverseGeocode.callArgs)

	mmReverseGeocode.mutex.RUnlock()

	return argCopy
}

// MinimockReverseGeocodeDone returns true if the count of the ReverseGeocode invocations corresponds
// the number of defined expectations
func (m *GeocoderMock) MinimockReverseGeocodeDone() bool {
	for _, e := range m.ReverseGeocodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReverseGeocodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReverseGeocodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReverseGeocode != nil && mm_atomic.LoadUint64(&m.afterReverseGeocodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockReverseGeocodeInspect logs each unmet expectation
func (m *GeocoderMock) MinimockReverseGeocodeInspect() {
	for _, e := range m.ReverseGeocodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GeocoderMock.ReverseGeocode with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReverseGeocodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReverseGeocodeCounter) < 1 {
		if m.ReverseGeocodeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GeocoderMock.ReverseGeocode")
		} else {
			m.t.Errorf("Expected call to GeocoderMock.ReverseGeocode with params: %#v", *m.ReverseGeocodeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReverseGeocode != nil && mm_atomic.LoadUint64(&m.afterReverseGeocodeCounter) < 1 {
		m.t.Error("Expected call to GeocoderMock.ReverseGeocode")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GeocoderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockReverseGeocodeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GeocoderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GeocoderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReverseGeocodeDone()
}
